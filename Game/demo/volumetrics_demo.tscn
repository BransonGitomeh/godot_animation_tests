[gd_scene load_steps=18 format=2]

[ext_resource path="res://addons/silicon.vfx.volumetrics/material/volumetric_material.gd" type="Script" id=1]
[ext_resource path="res://demo/directional_light.svg" type="Texture" id=2]
[ext_resource path="res://demo/test_volume.png" type="Texture3D" id=3]
[ext_resource path="res://demo/omni_light.svg" type="Texture" id=4]
[ext_resource path="res://addons/maujoe.camera_control/scripts/camera_control.gd" type="Script" id=5]
[ext_resource path="res://demo/volumetrics_demo.gd" type="Script" id=6]
[ext_resource path="res://addons/silicon.vfx.volumetrics/volumetric_fog.gd" type="Script" id=7]
[ext_resource path="res://addons/silicon.vfx.volumetrics/volume_proxy.gd" type="Script" id=9]
[ext_resource path="res://demo/gui.gd" type="Script" id=10]
[ext_resource path="res://demo/sponza_scene/sponza.obj" type="ArrayMesh" id=11]

[sub_resource type="GDScript" id=7]
script/source = "# Licensed under the MIT License.
# Copyright (c) 2018 Jaccomo Lorenz (Maujoe)

extends Camera

# User settings:
# General settings
export var enabled = true setget set_enabled
export(int, \"Visible\", \"Hidden\", \"Caputered, Confined\") var mouse_mode = 2

# Mouslook settings
export var mouselook = true
export (float, 0.0, 1.0) var sensitivity = 0.5
export (float, 0.0, 0.999, 0.001) var smoothness = 0.5 setget set_smoothness
export(NodePath) var privot setget set_privot
export var distance = 5.0 setget set_distance
export var rotate_privot = false
export var collisions = true setget set_collisions
export (int, 0, 360) var yaw_limit = 360
export (int, 0, 360) var pitch_limit = 360

# Movement settings
export var movement = true
export (float, 0.0, 1.0) var acceleration = 1.0
export (float, 0.0, 0.0, 1.0) var deceleration = 0.1
export var max_speed = Vector3(1.0, 1.0, 1.0)
export var local = true
export var forward_action = \"ui_up\"
export var backward_action = \"ui_down\"
export var left_action = \"ui_left\"
export var right_action = \"ui_right\"
export var up_action = \"ui_page_up\"
export var down_action = \"ui_page_down\"

# Intern variables.
var _mouse_position = Vector2(0.0, 0.0)
var _yaw = 0.0
var _pitch = 0.0
var _total_yaw = 0.0
var _total_pitch = 0.0

var _direction = Vector3(0.0, 0.0, 0.0)
var _speed = Vector3(0.0, 0.0, 0.0)
var _gui

func _ready():
	if privot:
		privot = get_node(privot)
	else:
		privot = null

	set_enabled(enabled)

var mouse_c=false
var is_ui=false

func set_ui_input(val):
		is_ui=val

func _input(event):
	if event is InputEventMouseButton:
		mouse_c=!mouse_c
		

	if mouselook and mouse_c and !is_ui:
		if event is InputEventMouseMotion:
			_mouse_position = event.relative

	if movement:
		if event.is_action_pressed(forward_action):
			_direction.z = -1
		elif event.is_action_pressed(backward_action):
			_direction.z = 1
		elif not Input.is_action_pressed(forward_action) and not Input.is_action_pressed(backward_action):
			_direction.z = 0

		if event.is_action_pressed(left_action):
			_direction.x = -1
		elif event.is_action_pressed(right_action):
			_direction.x = 1
		elif not Input.is_action_pressed(left_action) and not Input.is_action_pressed(right_action):
			_direction.x = 0
			
		if event.is_action_pressed(up_action):
			_direction.y = 1
		if event.is_action_pressed(down_action):
			_direction.y = -1
		elif not Input.is_action_pressed(up_action) and not Input.is_action_pressed(down_action):
			_direction.y = 0

func _process(delta):
	if privot:
		_update_distance()
	if mouselook:
		_update_mouselook()
	if movement:
		_update_movement(delta)

func _physics_process(delta):
	# Called when collision are enabled
	_update_distance()
	if mouselook:
		_update_mouselook()

	var space_state = get_world().get_direct_space_state()
	var obstacle = space_state.intersect_ray(privot.get_translation(),  get_translation())
	if not obstacle.empty():
		set_translation(obstacle.position)

func _update_movement(delta):
	var offset = max_speed * acceleration * _direction
	
	_speed.x = clamp(_speed.x + offset.x, -max_speed.x, max_speed.x)
	_speed.y = clamp(_speed.y + offset.y, -max_speed.y, max_speed.y)
	_speed.z = clamp(_speed.z + offset.z, -max_speed.z, max_speed.z)
	
	# Apply deceleration if no input
	if _direction.x == 0:
		_speed.x *= (1.0 - deceleration)
	if _direction.y == 0:
		_speed.y *= (1.0 - deceleration)
	if _direction.z == 0:
		_speed.z *= (1.0 - deceleration)

	if local:
		translate(_speed * delta)
	else:
		global_translate(_speed * delta)

func _update_mouselook():
	_mouse_position *= sensitivity
	_yaw = _yaw * smoothness + _mouse_position.x * (1.0 - smoothness)
	_pitch = _pitch * smoothness + _mouse_position.y * (1.0 - smoothness)
	_mouse_position = Vector2(0, 0)

	if yaw_limit < 360:
		_yaw = clamp(_yaw, -yaw_limit - _total_yaw, yaw_limit - _total_yaw)
	if pitch_limit < 360:
		_pitch = clamp(_pitch, -pitch_limit - _total_pitch, pitch_limit - _total_pitch)

	_total_yaw += _yaw
	_total_pitch += _pitch

	if privot:
		var target = privot.get_translation()
		var offset = get_translation().distance_to(target)

		set_translation(target)
		rotate_y(deg2rad(-_yaw))
		rotate_object_local(Vector3(1,0,0), deg2rad(-_pitch))
		translate(Vector3(0.0, 0.0, offset))

		if rotate_privot:
			privot.rotate_y(deg2rad(-_yaw))
	else:
		rotate_y(deg2rad(-_yaw))
		rotate_object_local(Vector3(1,0,0), deg2rad(-_pitch))

func _update_distance():
	var t = privot.get_translation()
	t.z -= distance
	set_translation(t)

func _update_process_func():
	# Use physics process if collision are enabled
	if collisions and privot:
		set_physics_process(true)
		set_process(false)
	else:
		set_physics_process(false)
		set_process(true)

func _check_actions(actions=[]):
	if OS.is_debug_build():
		for action in actions:
			if not InputMap.has_action(action):
				print('WARNING: No action \"' + action + '\"')

func set_privot(value):
	privot = value
	# TODO: fix parenting.
#	if privot:
#		if get_parent():
#			get_parent().remove_child(self)
#		privot.add_child(self)
	_update_process_func()

func set_collisions(value):
	collisions = value
	_update_process_func()

func set_enabled(value):
	enabled = value
	if enabled:
		Input.set_mouse_mode(mouse_mode)
		set_process_input(true)
		_update_process_func()
	else:
		set_process(false)
		set_process_input(false)
		set_physics_process(false)

func set_smoothness(value):
	smoothness = clamp(value, 0.001, 0.999)

func set_distance(value):
	distance = max(0, value)
"

[sub_resource type="Environment" id=1]
background_mode = 1
background_color = Color( 0.105882, 0.105882, 0.105882, 1 )
ambient_light_color = Color( 0.2, 0.2, 0.2, 1 )
dof_blur_far_amount = 0.13

[sub_resource type="Animation" id=2]
length = 6.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Lights/OmniLight:translation")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 13, 2.2, -4 ), Vector3( -13, 2.2, -4 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Lights/OmniLight2:translation")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( -13, 2.2, 4 ), Vector3( 13, 2.2, 4 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Lights/DirectionalLight:rotation_degrees")
tracks/2/interp = 2
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( -120, 0, 0 ), Vector3( -60, 0, 0 ) ]
}

[sub_resource type="Resource" id=3]
script = ExtResource( 1 )
scatter_color = Color( 0.75, 0.75, 0.75, 1 )
density = 0.15
scatter_texture = ExtResource( 3 )
absorption_color = Color( 0.670588, 0.670588, 0.670588, 1 )
anisotropy = 0.616
emission_enabled = false
uvw_scale = Vector3( 0.177, 0.174, 0.155 )
uvw_offset = Vector3( 0, 0, 0 )

[sub_resource type="Resource" id=4]
script = ExtResource( 1 )
scatter_color = Color( 0.568627, 0.501961, 0.894118, 1 )
density = 0.379
absorption_color = Color( 0.921569, 0.921569, 0.921569, 1 )
anisotropy = -0.585
emission_enabled = false
uvw_scale = Vector3( 1, 1, 1 )
uvw_offset = Vector3( 0, 0, 0 )

[sub_resource type="Resource" id=5]
script = ExtResource( 1 )
scatter_color = Color( 0.572549, 0.572549, 0.572549, 1 )
density = 4.0
absorption_color = Color( 0.498039, 0.12549, 0.12549, 1 )
anisotropy = 0.0
emission_enabled = true
emission_color = Color( 0.427451, 0.568627, 0.905882, 1 )
emission_strength = 0.0
uvw_scale = Vector3( 1, 1, 1 )
uvw_offset = Vector3( 0, 0, 0 )

[sub_resource type="StyleBoxFlat" id=6]
bg_color = Color( 0.141388, 0.135132, 0.160156, 1 )
border_width_right = 3
border_width_bottom = 3
border_color = Color( 0.0666667, 0.0666667, 0.0666667, 1 )
corner_radius_bottom_right = 8
expand_margin_left = 5.0
expand_margin_top = 5.0

[node name="Spatial" type="Spatial"]
script = ExtResource( 6 )

[node name="sponza" type="MeshInstance" parent="."]
mesh = ExtResource( 11 )
material/0 = null
material/1 = null
material/2 = null
material/3 = null
material/4 = null
material/5 = null
material/6 = null
material/7 = null
material/8 = null
material/9 = null
material/10 = null
material/11 = null
material/12 = null
material/13 = null
material/14 = null
material/15 = null
material/16 = null
material/17 = null
material/18 = null
material/19 = null
material/20 = null
material/21 = null
material/22 = null
material/23 = null
material/24 = null
material/25 = null
material/26 = null
material/27 = null
material/28 = null
material/29 = null
material/30 = null
material/31 = null
material/32 = null
material/33 = null
material/34 = null
material/35 = null
material/36 = null
material/37 = null
__meta__ = {
"_edit_lock_": true,
"_vol_id": 24,
"apply_volumetrics": false
}

[node name="Camera" type="Camera" parent="."]
process_priority = 1
transform = Transform( -4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, -10.1269, 2.20875, -4.42659e-07 )
script = SubResource( 7 )
pitch_limit = 175
max_speed = Vector3( 2, 2, 5 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 1 )

[node name="VolumetricFog" type="Node" parent="WorldEnvironment"]
process_priority = 512
script = ExtResource( 7 )
__meta__ = {
"_editor_description_": ""
}
start = 0.1
end = 60.0
tile_size = 2
samples = 1
distribution = 0.82
temporal_blending = 0.83
volumetric_shadows = true
shadow_atlas_size = 512
ambient_light_color = Color( 0.0823529, 0.0823529, 0.0823529, 1 )
ambient_light_energy = 1.0

[node name="Lights" type="Spatial" parent="."]

[node name="OmniLight" type="OmniLight" parent="Lights"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.69119, 2.2, -4 )
light_color = Color( 0.52549, 0.847059, 0.423529, 1 )
shadow_enabled = true
omni_range = 18.0
omni_attenuation = 2.73208
__meta__ = {
"volumetric": 4.07
}

[node name="OmniLight2" type="OmniLight" parent="Lights"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1.69119, 2.2, 4 )
light_color = Color( 0.847059, 0.423529, 0.423529, 1 )
shadow_enabled = true
omni_range = 18.0
omni_attenuation = 2.73208
__meta__ = {
"volumetric": 4.07
}

[node name="DirectionalLight" type="DirectionalLight" parent="Lights"]
transform = Transform( 1, 0, 0, 0, -0.0680631, 0.997681, 0, -0.997681, -0.0680631, 0, 2.54653, 0 )
visible = false
shadow_enabled = true
__meta__ = {
"_vol_id": 27,
"volumetric": 2.0
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "omni lights"
playback_speed = 0.0
"anims/omni lights" = SubResource( 2 )

[node name="VolumeProxy" type="Spatial" parent="."]
script = ExtResource( 9 )
material = SubResource( 3 )
bounds_mode = 0

[node name="VolumeProxy2" type="Spatial" parent="."]
script = ExtResource( 9 )
material = SubResource( 4 )
bounds_mode = 1
extents = Vector3( 16.605, 1.63871, 7.77037 )
bounds_fade = Vector3( 0, 0.584, 0 )

[node name="VolumeProxy3" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.33799, 0 )
script = ExtResource( 9 )
material = SubResource( 5 )
bounds_mode = 2
extents = Vector3( 1.5, 1.5, 1.5 )
bounds_fade = Vector3( 0, 0.5, 0 )

[node name="GUI" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
script = ExtResource( 10 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="FPS" type="Label" parent="GUI"]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -66.5039
margin_top = 10.2384
margin_right = -20.5039
margin_bottom = 24.2384
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
text = "FPS: 30"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Panel" type="Panel" parent="GUI"]
margin_right = 358.0
margin_bottom = 276.0
custom_styles/panel = SubResource( 6 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBox" type="VBoxContainer" parent="GUI/Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 11.0
margin_top = 8.0
margin_right = -11.0
__meta__ = {
"_edit_group_": true,
"_edit_use_anchors_": false
}

[node name="AnimatedLights" type="HBoxContainer" parent="GUI/Panel/VBox"]
margin_right = 336.0
margin_bottom = 24.0

[node name="Label" type="Label" parent="GUI/Panel/VBox/AnimatedLights"]
margin_top = 5.0
margin_right = 135.0
margin_bottom = 19.0
rect_min_size = Vector2( 135, 0 )
hint_tooltip = "Whether to move the lights about."
mouse_filter = 0
text = "Animated Lights"

[node name="CheckBox" type="CheckBox" parent="GUI/Panel/VBox/AnimatedLights"]
margin_left = 139.0
margin_right = 336.0
margin_bottom = 24.0
size_flags_horizontal = 3
text = "On"

[node name="LightType" type="HBoxContainer" parent="GUI/Panel/VBox"]
margin_top = 28.0
margin_right = 336.0
margin_bottom = 50.0

[node name="Label" type="Label" parent="GUI/Panel/VBox/LightType"]
margin_top = 4.0
margin_right = 135.0
margin_bottom = 18.0
rect_min_size = Vector2( 135, 0 )
hint_tooltip = "The type of light illuminating the scene."
mouse_filter = 0
text = "Light Type"

[node name="OptionButton" type="OptionButton" parent="GUI/Panel/VBox/LightType"]
margin_left = 139.0
margin_right = 336.0
margin_bottom = 22.0
size_flags_horizontal = 3
text = "Omni Lights"
icon = ExtResource( 4 )
items = [ "Omni Lights", ExtResource( 4 ), false, 0, null, "Directional Light", ExtResource( 2 ), false, 1, null ]
selected = 0

[node name="HSeparator" type="HSeparator" parent="GUI/Panel/VBox"]
margin_top = 54.0
margin_right = 336.0
margin_bottom = 59.0
custom_constants/separation = 5

[node name="TemporalBlending" type="HBoxContainer" parent="GUI/Panel/VBox"]
margin_top = 63.0
margin_right = 336.0
margin_bottom = 87.0

[node name="Label" type="Label" parent="GUI/Panel/VBox/TemporalBlending"]
margin_top = 5.0
margin_right = 135.0
margin_bottom = 19.0
rect_min_size = Vector2( 135, 0 )
hint_tooltip = "How much the volumetrics blends with the previous frame.
A higher value can smooth the effect more, but is more susceptible to ghosting artifacts."
mouse_filter = 0
text = "Temporal Blending"

[node name="SpinBox" type="SpinBox" parent="GUI/Panel/VBox/TemporalBlending"]
margin_left = 139.0
margin_right = 336.0
margin_bottom = 24.0
size_flags_horizontal = 3
max_value = 0.95
step = 0.01

[node name="TileSize" type="HBoxContainer" parent="GUI/Panel/VBox"]
margin_top = 91.0
margin_right = 336.0
margin_bottom = 111.0

[node name="Label" type="Label" parent="GUI/Panel/VBox/TileSize"]
margin_top = 3.0
margin_right = 135.0
margin_bottom = 17.0
rect_min_size = Vector2( 135, 0 )
hint_tooltip = "The size of each tile in the 3D textures used to render the effect.
A smaller number allows finer detail, but can severely reduce performance."
mouse_filter = 0
text = "Tile Size"

[node name="OptionButton" type="OptionButton" parent="GUI/Panel/VBox/TileSize"]
margin_left = 139.0
margin_right = 336.0
margin_bottom = 20.0
size_flags_horizontal = 3
text = "16x"
items = [ "4x", null, false, 0, null, "8x", null, false, 1, null, "16x", null, false, 2, null ]
selected = 2

[node name="Samples" type="HBoxContainer" parent="GUI/Panel/VBox"]
margin_top = 115.0
margin_right = 336.0
margin_bottom = 135.0

[node name="Label" type="Label" parent="GUI/Panel/VBox/Samples"]
margin_top = 3.0
margin_right = 135.0
margin_bottom = 17.0
rect_min_size = Vector2( 135, 0 )
hint_tooltip = "The number of layers used to render the volumes.
A larger number allows more detail along the depth of the scene, but can reduce performance."
mouse_filter = 0
text = "Samples"

[node name="OptionButton" type="OptionButton" parent="GUI/Panel/VBox/Samples"]
margin_left = 139.0
margin_right = 336.0
margin_bottom = 20.0
size_flags_horizontal = 3
text = "64"
items = [ "32", null, false, 0, null, "64", null, false, 1, null, "128", null, false, 2, null, "256", null, false, 3, null ]
selected = 1

[node name="VolumetricShadows" type="HBoxContainer" parent="GUI/Panel/VBox"]
margin_top = 139.0
margin_right = 336.0
margin_bottom = 163.0

[node name="Label" type="Label" parent="GUI/Panel/VBox/VolumetricShadows"]
margin_top = 5.0
margin_right = 135.0
margin_bottom = 19.0
rect_min_size = Vector2( 135, 0 )
hint_tooltip = "Enabling this allows volumes in view to cast shadows on themselves (Not on geometry though)."
mouse_filter = 0
text = "Volumetric Shadows"

[node name="CheckBox" type="CheckBox" parent="GUI/Panel/VBox/VolumetricShadows"]
margin_left = 139.0
margin_right = 336.0
margin_bottom = 24.0
size_flags_horizontal = 3
text = "On"

[node name="HSeparator2" type="HSeparator" parent="GUI/Panel/VBox"]
margin_top = 167.0
margin_right = 336.0
margin_bottom = 172.0
custom_constants/separation = 5
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TexturedFog" type="HBoxContainer" parent="GUI/Panel/VBox"]
margin_top = 176.0
margin_right = 336.0
margin_bottom = 200.0

[node name="Label" type="Label" parent="GUI/Panel/VBox/TexturedFog"]
margin_top = 5.0
margin_right = 135.0
margin_bottom = 19.0
rect_min_size = Vector2( 135, 0 )
hint_tooltip = "Whether to texture the global fog."
mouse_filter = 0
text = "Textured Fog"

[node name="CheckBox" type="CheckBox" parent="GUI/Panel/VBox/TexturedFog"]
margin_left = 139.0
margin_right = 336.0
margin_bottom = 24.0
size_flags_horizontal = 3
pressed = true
text = "On"

[node name="HeightFog" type="HBoxContainer" parent="GUI/Panel/VBox"]
margin_top = 204.0
margin_right = 336.0
margin_bottom = 228.0

[node name="Label" type="Label" parent="GUI/Panel/VBox/HeightFog"]
margin_top = 5.0
margin_right = 135.0
margin_bottom = 19.0
rect_min_size = Vector2( 135, 0 )
hint_tooltip = "Whether the local height fog should be visible."
mouse_filter = 0
text = "Height Fog"

[node name="CheckBox" type="CheckBox" parent="GUI/Panel/VBox/HeightFog"]
margin_left = 139.0
margin_right = 336.0
margin_bottom = 24.0
size_flags_horizontal = 3
pressed = true
text = "On"

[node name="EmissiveFog" type="HBoxContainer" parent="GUI/Panel/VBox"]
margin_top = 232.0
margin_right = 336.0
margin_bottom = 256.0

[node name="Label" type="Label" parent="GUI/Panel/VBox/EmissiveFog"]
margin_top = 5.0
margin_right = 135.0
margin_bottom = 19.0
rect_min_size = Vector2( 135, 0 )
hint_tooltip = "Whether the local ball of fog should emit light."
mouse_filter = 0
text = "Emissive Fog"

[node name="CheckBox" type="CheckBox" parent="GUI/Panel/VBox/EmissiveFog"]
margin_left = 139.0
margin_right = 336.0
margin_bottom = 24.0
size_flags_horizontal = 3
text = "On"

[node name="Tween" type="Tween" parent="GUI"]

[node name="Camera2" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.807246, 0 )
script = ExtResource( 5 )
[connection signal="toggled" from="GUI/Panel/VBox/AnimatedLights/CheckBox" to="GUI" method="_on_value_changed" binds= [ "AnimatedLights" ]]
[connection signal="item_selected" from="GUI/Panel/VBox/LightType/OptionButton" to="GUI" method="_on_value_changed" binds= [ "LightType" ]]
[connection signal="value_changed" from="GUI/Panel/VBox/TemporalBlending/SpinBox" to="GUI" method="_on_value_changed" binds= [ "TemporalBlending" ]]
[connection signal="item_selected" from="GUI/Panel/VBox/TileSize/OptionButton" to="GUI" method="_on_value_changed" binds= [ "TileSize" ]]
[connection signal="item_selected" from="GUI/Panel/VBox/Samples/OptionButton" to="GUI" method="_on_value_changed" binds= [ "Samples" ]]
[connection signal="toggled" from="GUI/Panel/VBox/VolumetricShadows/CheckBox" to="GUI" method="_on_value_changed" binds= [ "VolumetricShadows" ]]
[connection signal="toggled" from="GUI/Panel/VBox/TexturedFog/CheckBox" to="GUI" method="_on_value_changed" binds= [ "TexturedFog" ]]
[connection signal="toggled" from="GUI/Panel/VBox/HeightFog/CheckBox" to="GUI" method="_on_value_changed" binds= [ "HeightFog" ]]
[connection signal="toggled" from="GUI/Panel/VBox/EmissiveFog/CheckBox" to="GUI" method="_on_value_changed" binds= [ "EmissiveFog" ]]
